{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/maja/Code/ZuberSite/components/Section.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Slide, Fade, RevealBase } from 'react-reveal';\n\nvar createObserver = function createObserver(el, handleIntersect) {\n  var options = {\n    root: null,\n    rootMargin: \"0px\",\n    threshold: 0.5\n  };\n  var observer = new IntersectionObserver(handleIntersect, options);\n  observer.observe(el);\n};\n\nvar Section = function Section(_ref) {\n  var baseClass = _ref.baseClass,\n      titleClass = _ref.titleClass,\n      title = _ref.title,\n      children = _ref.children,\n      flexHeight = _ref.flexHeight,\n      name = _ref.name;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      reveal = _useState2[0],\n      setReveal = _useState2[1];\n\n  var sectionRef = useRef();\n  useEffect(function () {\n    if (sectionRef.current && name === 'statistics') {\n      createObserver(sectionRef.current, function (entries) {\n        return setReveal(entries[0].isIntersecting);\n      });\n    }\n  }, []);\n  return React.createElement(\"section\", {\n    className: \"\".concat(baseClass).concat(flexHeight ? ' section--flex' : ''),\n    id: name,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: sectionRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, title && React.createElement(\"h3\", {\n    className: \"section-title t-6 t-grey \".concat(titleClass),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, title), children));\n};\n\nexport default Section;","map":{"version":3,"sources":["/Users/maja/Code/ZuberSite/components/Section.js"],"names":["React","useState","useEffect","useRef","Slide","Fade","RevealBase","createObserver","el","handleIntersect","options","root","rootMargin","threshold","observer","IntersectionObserver","observe","Section","baseClass","titleClass","title","children","flexHeight","name","reveal","setReveal","sectionRef","current","entries","isIntersecting"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,cAAxC;;AAEA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,EAAD,EAAKC,eAAL,EAAyB;AAC5C,MAAMC,OAAO,GAAG;AACZC,IAAAA,IAAI,EAAE,IADM;AAEZC,IAAAA,UAAU,EAAE,KAFA;AAGZC,IAAAA,SAAS,EAAE;AAHC,GAAhB;AAMA,MAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBN,eAAzB,EAA0CC,OAA1C,CAAjB;AACAI,EAAAA,QAAQ,CAACE,OAAT,CAAiBR,EAAjB;AACH,CATD;;AAWA,IAAMS,OAAO,GAAG,SAAVA,OAAU,OAAkE;AAAA,MAA/DC,SAA+D,QAA/DA,SAA+D;AAAA,MAApDC,UAAoD,QAApDA,UAAoD;AAAA,MAAxCC,KAAwC,QAAxCA,KAAwC;AAAA,MAAjCC,QAAiC,QAAjCA,QAAiC;AAAA,MAAvBC,UAAuB,QAAvBA,UAAuB;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBAClDtB,QAAQ,CAAC,KAAD,CAD0C;AAAA;AAAA,MACvEuB,MADuE;AAAA,MAC/DC,SAD+D;;AAE9E,MAAMC,UAAU,GAAGvB,MAAM,EAAzB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIwB,UAAU,CAACC,OAAX,IAAsBJ,IAAI,KAAK,YAAnC,EAAiD;AAC7ChB,MAAAA,cAAc,CAACmB,UAAU,CAACC,OAAZ,EAAqB,UAACC,OAAD;AAAA,eAAaH,SAAS,CAACG,OAAO,CAAC,CAAD,CAAP,CAAWC,cAAZ,CAAtB;AAAA,OAArB,CAAd;AACH;AACJ,GAJQ,EAIN,EAJM,CAAT;AAMA,SACI;AAAS,IAAA,SAAS,YAAOX,SAAP,SAAoBI,UAAU,GAAG,gBAAH,GAAsB,EAApD,CAAlB;AAA6E,IAAA,EAAE,EAAGC,IAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAGG,UAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMN,KAAK,IAAK;AAAI,IAAA,SAAS,qCAA+BD,UAA/B,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6DC,KAA7D,CADhB,EAEMC,QAFN,CADJ,CADJ;AAQH,CAlBD;;AAoBA,eAAeJ,OAAf","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Slide, Fade, RevealBase } from 'react-reveal';\n\nconst createObserver = (el, handleIntersect) => {\n    const options = {\n        root: null,\n        rootMargin: \"0px\",\n        threshold: 0.5\n    };\n\n    const observer = new IntersectionObserver(handleIntersect, options);\n    observer.observe(el);\n}\n\nconst Section = ({ baseClass, titleClass, title, children, flexHeight, name }) => {\n    const [reveal, setReveal] = useState(false)\n    const sectionRef = useRef()\n\n    useEffect(() => {\n        if (sectionRef.current && name === 'statistics') {\n            createObserver(sectionRef.current, (entries) => setReveal(entries[0].isIntersecting))\n        }\n    }, [])\n\n    return (\n        <section className={ `${ baseClass }${flexHeight ? ' section--flex' : ''}` } id={ name }>\n            <div ref={ sectionRef }>\n                { title &&  <h3 className={ `section-title t-6 t-grey ${titleClass}` }>{ title }</h3> }\n                { children }\n            </div>\n        </section>\n    )\n}\n\nexport default Section\n"]},"metadata":{},"sourceType":"module"}